version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: ${DB_CONTAINER_NAME:-proyecto-postgres}
    restart: unless-stopped
    ports:
      - "${DB_PORT:-5432}:5432"
    environment:
      - POSTGRES_USER=${DB_USERNAME:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
      - POSTGRES_DB=${DB_DATABASE:-proyecto_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend-network

  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ${API_CONTAINER_NAME:-proyecto-de-grado-api}
    restart: unless-stopped
    ports:
      - "4000:4000"  # Hardcoded (avoid variables)
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=4000  # Hardcoded
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=${DB_USERNAME:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - DB_DATABASE=${DB_DATABASE:-proyecto_db}
    networks:
      - backend-network
      - coolify-proxy  # Connect to Coolify's proxy network
    labels:
      # Traefik-specific labels (Coolify uses Traefik by default)
      - traefik.enable=true
      - traefik.http.routers.api.rule=Host(`api.recoagua.com`)
      - traefik.http.services.api.loadbalancer.server.port=4000
      - traefik.http.routers.api.entrypoints=websecure
      - traefik.http.routers.api.tls=true
      - traefik.http.routers.api.tls.certresolver=letsencrypt

networks:
  backend-network:
    driver: bridge
  coolify-proxy:
    external: true

volumes:
  postgres_data:
    driver: local